<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:property-placeholder location="classpath:jdbc.properties" />

    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg>
            <bean class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
                <property name="driverClass" value="${db.driverClassName}" />
		        <property name="jdbcUrl" value="${db.url}" />
		        <property name="user" value="${db.username}" />
		        <property name="password" value="${db.password}" /> 
		
		        <!-- these are C3P0 properties -->
		        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		        <property name="minPoolSize" value="${c3p0.minPoolSize}" />
		        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
            </bean>
        </constructor-arg>
    </bean>

    <!-- FactoryBean that creates the EntityManagerFactory: There are two ways to configure JPA provider  -->
    <!-- Way1: using Spring jpa adapter to specify related parameters -->
    <!-- <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
	    <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
	    <property name="persistenceUnitName" value="persistenceUnit"/>
	    <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
	    <property name="jpaProperties">
	        <props>
	            <prop key="hibernate.show_sql">true</prop>
	            <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
	        </props>
	    </property>
    </bean>
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
	  <property name="generateDdl" value="false" />
	</bean> -->
	<!-- Way2: Specify related parameters in persistence.xml -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
	    <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
	    <property name="persistenceUnitName" value="persistenceUnit"/>
    </bean>
	
    <!-- A transaction manager for working with JPA EntityManagerFactories -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    
    <!-- Instructs the container to look for beans with @Transactional and decorate them -->
    <tx:annotation-driven/>	
	<context:component-scan base-package="com.thomas.solar.dao" />

</beans>
